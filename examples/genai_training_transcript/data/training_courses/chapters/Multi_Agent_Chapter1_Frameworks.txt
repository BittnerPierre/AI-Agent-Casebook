# Multi AI Agent Systems - Chapter 1: Frameworks

## Introduction to Multi-Agent AI Systems

Welcome to Multi AI Agent Systems, where we'll explore the fascinating world of coordinated artificial intelligence. This module covers agent frameworks, orchestration patterns, and practical implementation of multi-agent workflows that can tackle complex problems through collaborative intelligence.

Modern AI applications increasingly benefit from multiple specialized agents working together, each contributing unique capabilities to solve complex, multi-faceted problems. Understanding how to design, coordinate, and deploy multi-agent systems is essential for building scalable AI solutions that can handle real-world complexity.

## Agent Frameworks and Architectural Patterns

### Understanding AI Agents

An AI agent is an autonomous software entity that perceives its environment, makes decisions, and takes actions to achieve specific goals. In multi-agent systems, individual agents collaborate to accomplish tasks that would be difficult or impossible for a single agent.

**Core Agent Characteristics:**
- **Autonomy**: Operates independently without constant human control
- **Reactivity**: Responds to environmental changes and stimuli
- **Proactivity**: Takes initiative to achieve goals
- **Social Ability**: Communicates and coordinates with other agents
- **Learning**: Adapts behavior based on experience and feedback

### Agent Architecture Patterns

**Reactive Agents**
```python
class ReactiveAgent:
    def __init__(self, name, rules):
        self.name = name
        self.rules = rules  # condition-action rules
        
    def perceive(self, environment):
        """Observe current environment state"""
        return environment.get_state()
        
    def act(self, perception):
        """Select action based on current perception"""
        for condition, action in self.rules:
            if condition(perception):
                return action
        return None  # Default: no action
```

**Deliberative Agents**
```python
class DeliberativeAgent:
    def __init__(self, name, goals, planner):
        self.name = name
        self.goals = goals
        self.planner = planner
        self.beliefs = {}
        self.intentions = []
        
    def deliberate(self, perception):
        """Update beliefs and form intentions"""
        self.update_beliefs(perception)
        self.form_intentions()
        return self.planner.create_plan(self.intentions)
        
    def update_beliefs(self, perception):
        """Update internal model of the world"""
        self.beliefs.update(perception)
        
    def form_intentions(self):
        """Decide what goals to pursue"""
        self.intentions = self.planner.select_goals(
            self.goals, self.beliefs
        )
```

**Hybrid Agents (BDI - Belief-Desire-Intention)**
```python
class BDIAgent:
    def __init__(self, name):
        self.name = name
        self.beliefs = {}      # What the agent knows
        self.desires = []      # What the agent wants
        self.intentions = []   # What the agent commits to do
        
    def agent_loop(self, perception):
        # Update beliefs based on perception
        self.update_beliefs(perception)
        
        # Generate new desires/goals
        new_desires = self.generate_desires()
        self.desires.extend(new_desires)
        
        # Select intentions from desires
        self.intentions = self.select_intentions(self.desires)
        
        # Execute current intentions
        return self.execute_intentions()
        
    def update_beliefs(self, perception):
        self.beliefs.update(perception)
        
    def generate_desires(self):
        # Generate new goals based on current beliefs
        return []
        
    def select_intentions(self, desires):
        # Choose which desires to commit to
        return desires[:3]  # Simple selection
        
    def execute_intentions(self):
        # Execute the first intention
        if self.intentions:
            return self.intentions[0].execute()
        return None
```

### Modern Agent Frameworks

**LangChain Agents**
```python
from langchain.agents import AgentType, initialize_agent
from langchain.llms import OpenAI
from langchain.tools import Tool

class LangChainAgentSystem:
    def __init__(self):
        self.llm = OpenAI(temperature=0)
        self.tools = self.setup_tools()
        
    def setup_tools(self):
        return [
            Tool(
                name="Calculator",
                description="Performs mathematical calculations",
                func=self.calculate
            ),
            Tool(
                name="WebSearch", 
                description="Searches the web for information",
                func=self.web_search
            )
        ]
        
    def create_agent(self, agent_type="ZERO_SHOT_REACT_DESCRIPTION"):
        return initialize_agent(
            tools=self.tools,
            llm=self.llm,
            agent=getattr(AgentType, agent_type),
            verbose=True
        )
        
    def calculate(self, expression):
        try:
            return str(eval(expression))
        except:
            return "Invalid mathematical expression"
            
    def web_search(self, query):
        # Implement web search functionality
        return f"Search results for: {query}"
```

**Agent SDK Pattern**
```python
class AgentSDK:
    def __init__(self):
        self.agents = {}
        self.message_bus = MessageBus()
        
    def register_agent(self, agent):
        self.agents[agent.name] = agent
        agent.set_communication_channel(self.message_bus)
        
    def create_workflow(self, workflow_definition):
        workflow = Workflow(workflow_definition)
        for step in workflow.steps:
            agent = self.agents.get(step.agent_name)
            if agent:
                step.bind_agent(agent)
        return workflow
        
    def execute_workflow(self, workflow, input_data):
        return workflow.execute(input_data)

class MessageBus:
    def __init__(self):
        self.subscribers = {}
        
    def subscribe(self, agent_name, message_type, handler):
        if message_type not in self.subscribers:
            self.subscribers[message_type] = []
        self.subscribers[message_type].append((agent_name, handler))
        
    def publish(self, message_type, message, sender=None):
        if message_type in self.subscribers:
            for agent_name, handler in self.subscribers[message_type]:
                if agent_name != sender:  # Don't send to self
                    handler(message)
```

## Communication and Coordination Foundations

### Message Passing Interface

**Agent Message Structure:**
```python
class AgentMessage:
    def __init__(self, sender, receiver, message_type, content, timestamp=None):
        self.sender = sender
        self.receiver = receiver
        self.message_type = message_type
        self.content = content
        self.timestamp = timestamp or datetime.now()
        
class CommunicationProtocol:
    def __init__(self):
        self.message_queue = []
        self.protocols = {
            'request': self.handle_request,
            'inform': self.handle_inform,
            'query': self.handle_query,
            'propose': self.handle_propose
        }
        
    def send_message(self, message):
        self.message_queue.append(message)
        self.process_message(message)
        
    def process_message(self, message):
        handler = self.protocols.get(message.message_type)
        if handler:
            return handler(message)
        
    def handle_request(self, message):
        # Handle task requests
        pass
        
    def handle_inform(self, message):
        # Handle information sharing
        pass
        
    def handle_query(self, message):
        # Handle information queries
        pass
        
    def handle_propose(self, message):
        # Handle proposals/negotiations
        pass
```

### Blackboard Communication System

**Shared Knowledge Space:**
```python
class Blackboard:
    def __init__(self):
        self.knowledge_sources = []
        self.data = {}
        self.control_strategy = None
        
    def add_knowledge_source(self, ks):
        self.knowledge_sources.append(ks)
        
    def write(self, key, value, author):
        self.data[key] = {
            'value': value,
            'author': author,
            'timestamp': datetime.now()
        }
        self.notify_knowledge_sources(key)
        
    def read(self, key):
        return self.data.get(key, {}).get('value')
        
    def notify_knowledge_sources(self, changed_key):
        for ks in self.knowledge_sources:
            if ks.is_interested_in(changed_key):
                ks.activate(self)
                
class KnowledgeSource:
    def __init__(self, name, trigger_patterns, action):
        self.name = name
        self.trigger_patterns = trigger_patterns
        self.action = action
        
    def is_interested_in(self, key):
        return any(pattern in key for pattern in self.trigger_patterns)
        
    def activate(self, blackboard):
        return self.action(blackboard)
```

## Agent Lifecycle Management

**Agent State Management:**
```python
from enum import Enum

class AgentState(Enum):
    INITIALIZING = "initializing"
    IDLE = "idle"
    WORKING = "working"
    COMMUNICATING = "communicating"
    ERROR = "error"
    SHUTDOWN = "shutdown"

class ManagedAgent:
    def __init__(self, name, capabilities):
        self.name = name
        self.capabilities = capabilities
        self.state = AgentState.INITIALIZING
        self.current_task = None
        self.performance_metrics = {}
        
    def transition_state(self, new_state):
        old_state = self.state
        self.state = new_state
        self.on_state_change(old_state, new_state)
        
    def on_state_change(self, old_state, new_state):
        print(f"Agent {self.name}: {old_state} -> {new_state}")
        
    def can_accept_task(self, task):
        return (self.state == AgentState.IDLE and 
                task.required_capability in self.capabilities)
                
    def assign_task(self, task):
        if self.can_accept_task(task):
            self.current_task = task
            self.transition_state(AgentState.WORKING)
            return True
        return False
```

## Framework Integration Patterns

**Multi-Framework Integration:**
```python
class UnifiedAgentFramework:
    def __init__(self):
        self.agents = {}
        self.frameworks = {
            'langchain': LangChainAgentSystem(),
            'custom': AgentSDK()
        }
        
    def create_agent(self, name, framework_type, config):
        if framework_type == 'langchain':
            agent = self.frameworks['langchain'].create_agent(config.get('agent_type'))
            agent.name = name
        elif framework_type == 'custom':
            agent = ManagedAgent(name, config.get('capabilities', []))
        else:
            raise ValueError(f"Unknown framework type: {framework_type}")
            
        self.agents[name] = agent
        return agent
        
    def coordinate_agents(self, task):
        # Find suitable agents for the task
        suitable_agents = []
        for agent in self.agents.values():
            if hasattr(agent, 'can_accept_task') and agent.can_accept_task(task):
                suitable_agents.append(agent)
                
        # Coordinate task execution
        if suitable_agents:
            return self.execute_collaborative_task(task, suitable_agents)
        else:
            return "No suitable agents found for task"
            
    def execute_collaborative_task(self, task, agents):
        # Simple round-robin coordination
        results = []
        for agent in agents:
            if hasattr(agent, 'run'):  # LangChain agent
                result = agent.run(task.description)
            else:  # Custom agent
                result = agent.execute_task(task)
            results.append(result)
        return results
```

## Key Takeaways

1. **Agent architectures range from reactive to deliberative** with BDI models providing sophisticated reasoning
2. **Modern frameworks like LangChain provide powerful abstractions** for building agent systems
3. **Communication protocols enable coordination** between autonomous agents
4. **Blackboard systems provide shared knowledge spaces** for collaborative problem solving
5. **Agent lifecycle management ensures reliable operation** in production environments
6. **Framework integration allows leveraging multiple technologies** in a unified system

This foundation of agent frameworks and architectural patterns provides the building blocks for creating sophisticated multi-agent systems. Understanding these concepts is essential for designing systems where multiple AI agents can work together effectively to solve complex problems that require diverse capabilities and coordinated execution.